# Kubernetes Deployment Configuration
# File: k8s/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: barbershop-prod
  labels:
    app: barbershop
    environment: production

---
# File: k8s/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: barbershop-config
  namespace: barbershop-prod
data:
  ENVIRONMENT: "production"
  PORT: "8080"
  LOG_LEVEL: "info"
  RATE_LIMIT_GLOBAL_MAX: "1000"
  RATE_LIMIT_USER_MAX: "100"
  CORS_ALLOW_CREDENTIALS: "true"
  SLOW_REQUEST_THRESHOLD_MS: "1000"
  UPLOAD_MAX_SIZE: "10MB"

---
# File: k8s/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: barbershop-secrets
  namespace: barbershop-prod
type: Opaque
data:
  # Base64 encoded values - replace with your actual encoded secrets
  DATABASE_URL: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQHBvc3RncmVzOjU0MzIvYmFyYmVyc2hvcD9zc2xtb2RlPWRpc2FibGU=
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ==
  REDIS_PASSWORD: cmVkaXMtcGFzc3dvcmQ=
  GOOGLE_MAPS_API_KEY: eW91ci1nb29nbGUtbWFwcy1hcGkta2V5
  SMTP_USER: eW91ci1zbXRwLXVzZXI=
  SMTP_PASS: eW91ci1zbXRwLXBhc3N3b3Jk

---
# File: k8s/postgres.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: barbershop-prod
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: barbershop
        - name: POSTGRES_USER
          value: barbershop_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - barbershop_user
            - -d
            - barbershop
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - barbershop_user
            - -d
            - barbershop
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "ssd"
      resources:
        requests:
          storage: 20Gi

---
# File: k8s/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: barbershop-prod
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# File: k8s/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: barbershop-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: barbershop-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# File: k8s/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: barbershop-prod
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# File: k8s/barbershop-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: barbershop-api
  namespace: barbershop-prod
  labels:
    app: barbershop-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: barbershop-api
  template:
    metadata:
      labels:
        app: barbershop-api
        version: v1
    spec:
      containers:
      - name: barbershop-api
        image: your-registry/barbershop-api:latest
        ports:
        - containerPort: 8080
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: barbershop-secrets
              key: DATABASE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: barbershop-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: barbershop-secrets
              key: REDIS_PASSWORD
        - name: GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: barbershop-secrets
              key: GOOGLE_MAPS_API_KEY
        envFrom:
        - configMapRef:
            name: barbershop-config
        volumeMounts:
        - name: upload-storage
          mountPath: /app/uploads
        - name: log-storage
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: upload-storage
        persistentVolumeClaim:
          claimName: upload-pvc
      - name: log-storage
        emptyDir: {}
      securityContext:
        fsGroup: 1001

---
# File: k8s/barbershop-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: barbershop-api
  namespace: barbershop-prod
  labels:
    app: barbershop-api
spec:
  selector:
    app: barbershop-api
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# File: k8s/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: barbershop-ingress
  namespace: barbershop-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://yourdomain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: barbershop-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: barbershop-api
            port:
              number: 80

---
# File: k8s/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: barbershop-api-hpa
  namespace: barbershop-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: barbershop-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
# File: k8s/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: upload-pvc
  namespace: barbershop-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: barbershop-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "ssd"
  resources:
    requests:
      storage: 10Gi

---
# File: k8s/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: barbershop-network-policy
  namespace: barbershop-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: barbershop-api
  - from:
    - podSelector:
        matchLabels:
          app: barbershop-api
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  egress:
  - {}

---
# File: k8s/monitoring.yaml
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: barbershop-api
  namespace: barbershop-prod
  labels:
    app: barbershop-api
spec:
  selector:
    matchLabels:
      app: barbershop-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s